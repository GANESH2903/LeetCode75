/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int longestZigZag(TreeNode root) {
        if(root == null){
            return 0;
        }
        return Math.max(longest(root.left, 1, true) , longest(root.right, 1, false));

    }
    public int longest(TreeNode root ,int currCount, boolean isLeft){
        if(root == null){
            return currCount - 1;
        }
        int leftpath = 0;
        int rightpath = 0;
        if(isLeft){
            leftpath = longest(root.left , 1,  true);
            rightpath = longest(root.right, currCount + 1 , false);
        }
        else{
            leftpath = longest(root.left ,currCount + 1, true);
            rightpath = longest(root.right, 1, false);         
        }
        return Math.max(leftpath,rightpath);
    }
}


////
A little loop hole in this 
/**
class Solution {
    public int longestZigZag(TreeNode root) {
        if(root.right == null && root.left == null){
            return 0;
        }
        return Math.max(longest(root.left, "right") , longest(root.right, "left"));

    }
    public int longest(TreeNode root , String side){
        if(root == null){
            return 0;
        }
        if(root.right == null && root.left == null){
            return 1;
        }
        if(side == "right"){
            return Math.max(1 + longest(root.right , "left") , longest(root.left , "right"));
        }
        else if(side == "left"){
            return Math.max(1 + longest(root.left, "right") , longest(root.right, "left"));
        }
        return 0;
    }
}
*/
